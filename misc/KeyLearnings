Main game flow is dictated by States.inc.php
Client-side interface is managed by game.js file
        -js code should handle player interactions
        -player actions should be commited to database, which should only be done in Game.php

The Deck item necessitates use of the Stock item to visually manifest cards.
Use a UniqueID function to generate card ids in Deck, and then reverse lookup the appropriate image or logic


Zombie player
Mandatory bga function for dice


The JS file is to generate real-time interface for current game state



States types:
_ activeplayer: in this type of state, we expect some action from the active player.
_ multipleactiveplayer: in this type of state, we expect some action from multiple players (the active players)
_ game: this is an intermediary state where we don't expect any actions from players. Your game logic must decide what is the next game state.
_ manager: special type for initial and final state

Arguments of game states:
_ name: the name of the GameState, in order you can recognize it on your own code.
_ description: the description of the current game state is always displayed in the action status bar on
               the top of the game. Most of the time this is useless for game state with "game" type.
_ descriptionmyturn: the description of the current game state when it's your turn.
_ type: defines the type of game states (activeplayer / multipleactiveplayer / game / manager)
_ action: name of the method to call when this game state become the current game state. Usually, the
          action method is prefixed by "st" (ex: "stMyGameStateName").
_ possibleactions: array that specify possible player actions on this step. It allows you to use "checkAction"
                   method on both client side (Javacript: this.checkAction) and server side (PHP: $this->checkAction).
_ transitions: the transitions are the possible paths to go from a game state to another. You must name
               transitions in order to use transition names in "nextState" PHP method, and use IDs to
               specify the next game state for each transition.
_ args: name of the method to call to retrieve arguments for this gamestate. Arguments are sent to the
        client side to be used on "onEnteringState" or to set arguments in the gamestate description.
_ updateGameProgression: when specified, the game progression is updated (=> call to your getGameProgression
                         method).